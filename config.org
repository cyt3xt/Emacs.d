#+TITLE: Emacs Configuration
#+AUTHOR: Xt3
#+Version: 2.0

* Setting
** Default
#+begin_src emacs-lisp
;; These functions are useful. Activate them.
(put 'downcase-region 'disabled nil)
(put 'upcase-region 'disabled nil)
(put 'narrow-to-region 'disabled nil)
(put 'dired-find-alternate-file 'disabled nil)

;; Answering just 'y' or 'n' will do
(defalias 'yes-or-no-p 'y-or-n-p)

;; Keep all backup and auto-save files in one directory
(setq delete-old-versions t)
(setq version-control t)
(setq vc-make-backup-files t)
(setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
(setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))
(global-auto-revert-mode 1)

;; UTF-8 please
(setq locale-coding-system 'utf-8) ; pretty
(set-terminal-coding-system 'utf-8) ; pretty
(set-keyboard-coding-system 'utf-8) ; pretty
(set-selection-coding-system 'utf-8) ; please
(prefer-coding-system 'utf-8) ; with sugar on top
(when (display-graphic-p)
  (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING)))

;;; UI
;; Turn off the blinking cursor
(blink-cursor-mode -1)
;;
(setq visible-bell nil)
(setq ring-bell-function 'ignore)
;;
(setq-default indent-tabs-mode nil)
(setq-default indicate-empty-lines t)
;;
(show-paren-mode t)
(column-number-mode t)
(global-visual-line-mode)
(diminish 'visual-line-mode)
(setq uniquify-buffer-name-style 'forward)
;; Turn on syntax highlighting for all buffers:
(global-font-lock-mode t)
;; GUI
(setq use-file-dialog nil)
(setq use-dialog-box nil)

;;; Edit
;; Just one space is needed
(setq sentence-end-double-space nil)
;; delete the region when typing
(delete-selection-mode t)
;; witespace
(setq show-trailing-whitespace nil)


;;; Scrolling
(setq mouse-wheel-scroll-amount (quote (0.07)))
  #+end_src

** Customize
- Custom file
  #+BEGIN_SRC emacs-lisp
;;; Load customize file
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
(load custom-file)

;;; Macro file
(load-file (expand-file-name "macros" user-emacs-directory))
  #+END_SRC
- Personal information
  #+BEGIN_SRC emacs-lisp
(setq user-full-name "Xt3"
      user-mail-address "badxt3@gmail.com")  
  #+END_SRC
- Font 
  #+begin_src emacs-lisp
(when (member "Hack" (font-family-list))
  (add-to-list 'initial-frame-alist '(font . "Hack-13"))
  (add-to-list 'default-frame-alist '(font . "Hack-13")))


(when (boundp '*is-a-mac*)
  ;; Chinese Font
  (when (member "PingFang SC" (font-family-list))
    ;; (unicode-fonts-setup) ; Sometimes need this, but why?
    (dolist (charset '(kana han cjk-misc bopomofo))
      (set-fontset-font (frame-parameter nil 'font)
                        charset
                        (font-spec :family "PingFang SC Regular"
                                   :size 13)))))
  #+end_src
- Theme
  - [[https://github.com/n3mo/cyberpunk-theme.el][Cyberpunk]] 
    #+BEGIN_SRC emacs-lisp
(use-package cyberpunk-theme
  :config
  (progn
    (load-theme 'cyberpunk t)))
    #+end_src
- Window
  #+begin_src emacs-lisp
;;; Split windows + switch to other window
  (defun vsplit-other-window ()
    "Splits the window vertically and switches to that window."
    (interactive)
    (split-window-vertically)
    (other-window 1 nil))
  (defun hsplit-other-window ()
    "Splits the window horizontally and switches to that window."
    (interactive)
    (split-window-horizontally)
    (other-window 1 nil))

  (bind-key "C-x 2" 'vsplit-other-window)
  (bind-key "C-x 3" 'hsplit-other-window)


;; Help window get focus
(setq help-window-select t)
    #+end_src
- Modeline
  #+BEGIN_SRC emacs-lisp
;; Display Time : When displaying the time with display-time-mode
(setq display-time-default-load-average nil)

;; Display Battery Mode
(setq battery-mode-line-format "[%b%p%% %t]")  
  #+END_SRC
- Chinese
  #+BEGIN_SRC emacs-lisp
;; 设置 sentence-end 可以识别中文标点
(setq sentence-end
      "\\([。！？]\\|……\\|[.?!][]\"')}]*\\($\\|[ \t]\\)\\)[ \t\n]*")  
  #+END_SRC
** For Mac
#+BEGIN_SRC emacs-lisp
(when (boundp '*is-a-mac*)
  ;; delete files by moving them to the trash
  (setq delete-by-moving-to-trash t)
  (setq trash-directory "~/.Trash")

  ;; Fn -> hyper
  (setq ns-function-modifier 'hyper)
  ;; Cmd -> meta
  (setq ns-command-modifier 'meta)
  ;; Opt -> super
  (setq ns-option-modifier 'super)
  
  ;; Don't make new frames when opening a new file with Emacs
  (setq ns-pop-up-frames nil)

  ;; Fullscreen!
  (setq ns-use-native-fullscreen nil)   ; Not Lion style
  (bind-key "<s-return>" 'toggle-frame-fullscreen)

  ;; Use super-` to switch between Emacs windows (not frames)
  (bind-key "s-`" 'other-window)
  ;; Use super-Shift-` to switch Emacs frames in reverse
  (bind-key "s-~" (lambda () (interactive) (other-window -1)))
  ;; Because of the keybindings above, set one for `other-frame'
  (bind-key "s-1" 'other-frame)
  ;; buffer switching
  (bind-key "s-{" 'previous-buffer)
  (bind-key "s-}" 'next-buffer)

  ;; Compiling
  (bind-key "H-c" 'compile)
  (bind-key "H-r" 'recompile)
  (bind-key "H-s" (defun save-and-recompile () (interactive) (save-buffer) (recompile)))

  ;; disable the key that minimizes emacs to the dock
  ;; (global-unset-key (kbd "C-z"))

  (defun open-dir-in-finder ()
    "Open a new Finder window to the path of the current buffer"
    (interactive)
    (shell-command "open ."))
  (bind-key "s-/" 'open-dir-in-finder)

  ;; (defun open-dir-in-iterm ()
  ;;   "Open the current directory of the buffer in iTerm."
  ;;   (interactive)
  ;;   (let* ((iterm-app-path "/Applications/iTerm.app")
  ;;          (iterm-brew-path "/opt/homebrew-cask/Caskroom/iterm2/1.0.0/iTerm.app")
  ;;          (iterm-path (if (file-directory-p iterm-app-path)
  ;;                          iterm-app-path
  ;;                        iterm-brew-path)))
  ;;     (shell-command (concat "open -a " iterm-path " ."))))
  ;; (bind-key "s-=" 'open-dir-in-iterm)

  ;; Not going to use these commands
  (put 'ns-print-buffer 'disabled t)
  (put 'suspend-frame 'disabled t)

  ;; font
  (setq mac-allow-anti-aliasing t)

  ;; Lisp 
  (setq inferior-lisp-program "ccl")
  
  ;; mdfind is the command line interface to Spotlight
  (setq locate-command "mdfind")

  ;; exec-path-from-shell : makes the command-line path with Emacs's shell match the same one on OS X.
  (use-package exec-path-from-shell
    :init
    (exec-path-from-shell-initialize))
  )
#+end_src

** Desktop Save & Session
#+BEGIN_SRC emacs-lisp
;; save a list of open files in ~/.emacs.d/.emacs.desktop
(setq desktop-path (list user-emacs-directory)
      desktop-auto-save-timeout 600)
(desktop-save-mode 1)

(setq-default history-length 1000)
(savehist-mode t)

;; save a bunch of variables to the desktop file
;; for lists specify the len of the maximal saved data also

(setq desktop-globals-to-save
      (append '((comint-input-ring        . 50)
                (compile-history          . 30)
                desktop-missing-file-warning
                (dired-regexp-history     . 20)
                (extended-command-history . 30)
                (face-name-history        . 20)
                (file-name-history        . 100)
                (grep-find-history        . 30)
                (grep-history             . 30)
                (ido-buffer-history       . 100)
                (ido-last-directory-list  . 100)
                (ido-work-directory-list  . 100)
                (ido-work-file-list       . 100)
                (magit-read-rev-history   . 50)
                (minibuffer-history       . 50)
                (org-clock-history        . 50)
                (org-refile-history       . 50)
                (org-tags-history         . 50)
                (query-replace-history    . 60)
                (read-expression-history  . 60)
                (regexp-history           . 60)
                (regexp-search-ring       . 20)
                register-alist
                (search-ring              . 20)
                (shell-command-history    . 50)
                tags-file-name
                tags-table-list)))

(use-package session
  :config
  (setq session-save-file (expand-file-name ".session" user-emacs-directory))
  (add-hook 'after-init-hook 'session-initialize))

(use-package frame-restore)
#+END_SRC

** Server
#+BEGIN_SRC emacs-lisp
(use-package server
  :config (unless (server-running-p)
            (server-start)))
#+END_SRC
** Shell
#+begin_src emacs-lisp
(bind-key "C-x m" 'shell)
(bind-key "C-x M" 'ansi-term)

;; -i gets alias definitions from .bash_profile
(setq shell-command-switch "-ic")
#+end_src

** Org
#+BEGIN_SRC emacs-lisp
;;; Startup
(setq org-startup-indented t)

;;; Edit
(setq org-catch-invisible-edits t)

;;; Speed command
(setq org-use-speed-commands t)

;;; Image
(setq org-image-actual-width 550)

;;; Org activation bindings
(bind-key "C-c l" 'org-store-link)
(bind-key "C-c c" 'org-capture)
(bind-key "C-c a" 'org-agenda)

;;; Tag 
(setq org-tags-column 45)

;;; Bebel
(org-babel-do-load-languages
 'org-babel-load-languages
 '((python . t)
   (C . t)
   (calc . t)
   (latex . t)
   (java . t)
   (ruby . t)
   (scheme . t)
   (sh . t)
   (sqlite . t)
   (js . t)))

(defun my-org-confirm-babel-evaluate (lang body)
  "Do not confirm evaluation for these languages."
  (not (or (string= lang "C")
           (string= lang "java")
           (string= lang "python")
           (string= lang "emacs-lisp")
           (string= lang "sqlite"))))
(setq org-confirm-babel-evaluate 'my-org-confirm-babel-evaluate)

;;; Source blocks
(setq org-src-fontify-natively t
      org-src-window-setup 'current-window
      org-src-strip-leading-and-trailing-blank-lines t
      org-src-preserve-indentation t
      org-src-tab-acts-natively t
      org-hide-block-startup t)
#+END_SRC
- org-bullets
  #+BEGIN_SRC emacs-lisp
(use-package org-bullets
  :config
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
  #+END_SRC
- ox-pandoc
  #+begin_src emacs-lisp
(use-package ox-pandoc
  :no-require t)
  #+end_src
** Dired
#+BEGIN_SRC emacs-lisp
(add-hook 'dired-mode-hook 'auto-revert-mode)
;; Also auto refresh dired, but be quiet about it
(setq global-auto-revert-non-file-buffers t)
(setq auto-revert-verbose nil)

;;(setq dired-recursive-deletes 'always)
;;(setq dired-recursive-copies 'always)

(setq dired-isearch-filenames 'dwim)
(setq-default diredp-hide-details-initially-flag nil
              dired-dwim-target t)

(use-package dired+)

(use-package dired-sort)

;; (use-package diff-hl
;;   :ensure t
;;   :config (add-hook 'dired-mode-hook 'diff-hl-dired-mode))
#+END_SRC
* Mode
** Dependency
#+BEGIN_SRC emacs-lisp
(use-package hydra)
(use-package paredit)
#+END_SRC
** UI
*** Ido
#+begin_src emacs-lisp
(use-package ido
  :config (progn
            (setq ido-enable-flex-matching t)
            (setq ido-everywhere t)
            (ido-mode t)
            ;; (use-package ido-ubiquitous
            ;;   :init (ido-ubiquitous-mode))
            (use-package ido-vertical-mode
              :config (ido-vertical-mode 1)
              (setq ido-vertical-define-keys 'C-n-and-C-p-only))
            ))
#+end_src
*** Smart mode line
#+BEGIN_SRC emacs-lisp
(use-package smart-mode-line
  :config (progn
            ;;(setq sml/theme 'dark)
            ;;(setq sml/theme 'light)
            (setq sml/theme 'respectful)
            (setq sml/no-confirm-load-theme t)
            (sml/setup)
            (set-face-attribute `mode-line nil
                                :box nil)
            (set-face-attribute `mode-line-inactive nil
                                :box nil)
            ))
#+END_SRC
*** COMMENT Aggressive Indent
#+BEGIN_SRC emacs-lisp
(use-package aggressive-indent
  :config
  (progn
    (global-aggressive-indent-mode t)
    ))
#+END_SRC
*** Ivy  
#+BEGIN_SRC emacs-lisp
(use-package counsel
  :config (progn 
            (ivy-mode 1)
            ;; Basic
            ;; (setq ivy-use-virtual-buffers t)
            (setq ivy-count-format "(%d/%d) ")
            (ivy-wrap t) ; cycle past the last and the first candidates 
            )
  :bind
  ("C-s" . swiper)
  ;; ("M-x" . counsel-M-x)
  ;; ("C-x C-f" . counsel-find-file)
  ;;("<f1> f" . counsel-describe-function)
  ;;("<f1> v" . counsel-describe-variable)
  ;;("<f1> l" . counsel-find-library)
  ;;("<f2> i" . counsel-info-lookup-symbol)
  ;;("<f2> u" . counsel-unicode-char)
  ;;("C-c C-r" . ivy-resume)
  ;; shell, system
  ;;("C-c g" . counsel-git)
  ;;("C-c j" . counsel-git-grep)
  ;;("C-c k" . counsel-ag)
  ;;("C-x l" . counsel-locate)
  
  )
;(define-key read-expression-map (kbd "C-r") 'counsel-expression-hisstory)
#+END_SRC
*** Helm
#+begin_src emacs-lisp
(use-package helm
  :diminish helm-mode
  :init 
  (progn
    (require 'helm-config)
    (use-package helm-projectile
      :commands helm-projectile
      :bind ("C-c p h" . helm-projectile))
    (use-package helm-ag)
    (setq helm-exit-idle-delay 0.1
          helm-input-idle-delay 0.01
          helm-idle-delay 0.0
          ;;- truncate long lines in helm completion
          ;; helm-truncate-lines t
          ;; may be overridden if 'ggrep' is in path (see below)
          helm-grep-default-command
          "grep -a -d skip %e -n%cH -e %p %f"
          helm-grep-default-recurse-command
          "grep -a -d recurse %e -n%cH -e %p %f"
          ;;
          ;; helm-locate-command "mdfind -interpret -name %s %s"
          ;; do not display invisible candidates
          helm-quick-update t
          ;; open helm buffer in another window
          helm-split-window-default-side 'other
          helm-move-to-line-cycle-in-source nil
          helm-echo-input-in-header-line t
          ;; open helm buffer inside current window, don't occupy whole other window
          helm-split-window-in-side-p t
          ;; limit the number of displayed canidates
          helm-candidate-number-limit 100
          ;;- don't use recentf stuff in helm-ff
          ;; helm-ff-file-name-history-use-recentf nil
          helm-ff-search-library-in-sexp t
          ;;- don't displace the header line
          ;; helm-display-header-line nil
          ;;- fuzzy matching
          helm-M-x-fuzzy-match t
          helm-buffers-fuzzy-matching t
          helm-recentf-fuzzy-match t
          helm-semantic-fuzzy-match t
          helm-imenu-fuzzy-match t
          helm-completion-in-region-fuzzy-match t
          helm-ag-fuzzy-match t
          helm-locate-fuzzy-match t
          ;;-
          projectile-indexing-method 'alien
          helm-ff-newfile-prompt-p nil
          helm-yas-display-key-on-candidate t
          helm-M-x-requires-pattern nil
          helm-ff-skip-boring-files t)
    (helm-mode 1))
  :bind
  (("C-c h" . helm-command-prefix)
   ("C-x b" . helm-mini)
   ("C-x C-b" . helm-buffers-list)
   ("C-`" . helm-resume)
   ("M-x" . helm-M-x)
   ("C-x C-f" . helm-find-files)
   ("M-y" . helm-show-kill-ring)
   ("C-x c SPC" . helm-all-mark-rings)
   
   ("C-h a" . helm-apropos)
   ("C-c h o" . helm-occur)
   ;;("C-c h s" . helm-swoop)
   
   ("C-c h y" . helm-yas-complete)
   ("C-c h Y" . helm-yas-create-snippet-on-region)
   ;;("C-c h t" . helm-world-time)
   ("C-c h m" . helm-man-woman)
   ("C-c h a" . helm-do-ag)
   ("M-g >" . helm-ag-this-file)
   ("M-g ," . helm-ag-pop-stack)
   ("M-g ." . helm-do-grep)
   ;;("C-x C-i" . helm-semantic-or-imenu)
   
   ))

(define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action) ; rebind tab to do persistent action
(define-key helm-map (kbd "C-i") 'helm-execute-persistent-action) ; make TAB works in terminal
(define-key helm-map (kbd "C-z")  'helm-select-action) ; list actions using C-z

;;Great for describing bindings. I'll replace the binding for where-is too.
(use-package helm-descbinds
  :config (helm-descbinds-mode)
  :bind 
  (("C-h b" . helm-descbinds)
   ("C-h w" . helm-descbinds)))

(use-package helm-swoop
  :bind 
  (("M-i" . helm-swoop)
   ("M-I" . helm-swoop-back-to-last-point)
   ("C-c M-i" . helm-multi-swoop))
  :config
  (progn
    ;; When doing isearch, hand the word over to helm-swoop
    (define-key isearch-mode-map (kbd "M-i") 'helm-swoop-from-isearch)
    ;; From helm-swoop to helm-multi-swoop-all
    (define-key helm-swoop-map (kbd "M-i") 'helm-multi-swoop-all-from-helm-swoop)
    ;; Save buffer when helm-multi-swoop-edit complete
    (setq helm-multi-swoop-edit-save t
          ;; If this value is t, split window inside the current window
          helm-swoop-split-with-multiple-windows nil
          ;; Split direcion. 'split-window-vertically or 'split-window-horizontally
          helm-swoop-split-direction 'split-window-vertically
          ;; If nil, you can slightly boost invoke speed in exchange for text color
          helm-swoop-speed-or-color nil)))
#+end_src

** View
*** pos-tip 
#+BEGIN_SRC emacs-lisp
(use-package pos-tip)
#+END_SRC
*** Undo tree mode
#+BEGIN_SRC emacs-lisp
(use-package undo-tree
  :diminish undo-tree-mode
  :config
  (progn
    (global-undo-tree-mode)
    (setq undo-tree-visualizer-timestamps t)
    (setq undo-tree-visualizer-diff t)
    (define-key undo-tree-map (kbd "C-x u") 'undo-tree-visualize)
    (define-key undo-tree-map (kbd "C-/") 'undo-tree-undo)
    ))
#+END_SRC
*** Rainbow Mode
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-mode
    :config
    (add-hook 'css-mode-hook 'rainbow-mode))
#+END_SRC
*** COMMENT Smooth-scroll
#+begin_src emacs-lisp
(use-package smooth-scroll
  :config
  (smooth-scroll-mode 1)
  (setq smooth-scroll/vscroll-step-size 5)
  )
#+end_src

*** COMMENT Visual Regexp
#+begin_src emacs-lisp
(use-package visual-regexp
  :init
  (use-package visual-regexp-steroids)
  :bind (("C-c r" . vr/replace)
         ("C-c q" . vr/query-replace)
         ;; Need multiple cursors
         ("C-c m" . vr/mc-mark) 
         ;; use visual-regexp-steroids's isearch instead of the built-in regexp isearch
         ("C-M-r" . vr/isearch-backward)
         ("C-M-s" . vr/isearch-forward)))
#+end_src
** Jump
*** Avy
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :config (progn
              (global-set-key (kbd "C-;") 'avy-goto-char)
              ;;(global-set-key (kbd "C-'") 'avy-goto-char-2)
              (global-set-key (kbd "M-g f") 'avy-goto-line)
              ;; (global-set-key (kbd "M-g e") 'avy-goto-word-0)
              (global-set-key (kbd "M-g w") 'avy-goto-word-1)))
#+END_SRC
*** Ace Window
#+begin_src emacs-lisp
(use-package ace-window
  :config (progn
            (setq aw-keys '(?a ?o ?e ?u ?h ?t ?n ?s))
            (ace-window-display-mode))
  :bind ("s-o" . ace-window))
#+end_src
** Edit
*** Multiple cursors
#+begin_src emacs-lisp
(use-package multiple-cursors
  :config
  (setq mc/always-run-for-all t))

(global-unset-key (kbd "M-<down-mouse-1>"))
(global-set-key (kbd "M-<mouse-1>") 'mc/add-cursor-on-click)


(global-set-key
 (kbd "C-S-c")
 (defhydra hydra-mc  ()
   "multiple-cursors"
   ("ll" mc/edit-lines "lines")
   ("le" mc/edit-ends-of-lines)
   ("j" mc/mark-next-like-this "next")
   ("J" mc/unmark-next-like-this)
   ("k" mc/mark-previous-like-this "prev")
   ("K" mc/unmark-previous-like-this)
   ("a" mc/mark-all-like-this "all")
   ("A" mc/mark-all-dwim "dwim")
   ("sn" mc/skip-to-next-like-this "skip-n")
   ("sp" mc/skip-to-previous-like-this "skip-p")
   ;; ("i" mc/insert-numbers)
   ))

;; ( "h" mc-hide-unmatched-lines-mode)
;; ( "dd" mc/mark-all-symbols-like-this-in-defun)
;; ( "dr" mc/reverse-regions)
;; ( "ds" mc/sort-regions)

#+end_src
*** whole-line-or-region
#+BEGIN_SRC emacs-lisp
(use-package whole-line-or-region
  :diminish whole-line-or-region-mode
  :config
  (whole-line-or-region-mode t)
  (make-variable-buffer-local 'whole-line-or-region-mode)
)
#+END_SRC
*** Smartparens mode
#+begin_src emacs-lisp
(use-package smartparens
  :diminish smartparens-mode
  :config (progn (require 'smartparens-config)
                 (smartparens-global-mode t)))

(sp-local-pair 'org-mode "~" "~" :actions '(wrap))
(sp-local-pair 'org-mode "/" "/" :actions '(wrap))
(sp-local-pair 'org-mode "*" "*" :actions '(wrap))
#+end_src
** Search 
*** Ag
#+BEGIN_SRC emacs-lisp
(use-package ag
  :commands ag)
#+END_SRC

** Assist
*** Winner mode
#+begin_src emacs-lisp
(winner-mode t)
#+end_src
*** Which Key
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :config
  (progn
    (which-key-mode)
    (which-key-setup-side-window-bottom)
    ))
#+END_SRC
*** Company  
#+BEGIN_SRC emacs-lisp
(use-package company
  :config
  (progn
    ;; (setq company-backends (nconc (list 'company-slime) company-backends))
    ;; ---company-backends
    ;; company-semantic
    ;; company-slime
    ;; company-files
    ;; company-capf
    ;; company-css
    ;; company-nxml
    ;; company-ispell
    ;; company-yasnippet
    ;; company-dabbrev
    ;; company-keywords
    ;; company-template

    ;; not always down case
    ;; (setq company-dabbrev-downcase nil)

    (add-hook 'after-init-hook 'global-company-mode)
    ;; (setq company-auto-complete nil)
    (setq company-show-numbers t)
    (setq company-idle-delay 0))
  :bind
  ("C-M-<tab>" . company-complete))


(use-package company-statistics
  :config (add-hook 'after-init-hook 'company-statistics-mode))

(use-package company-quickhelp
  :config
  (company-quickhelp-mode 1)
  (setq company-quickhelp-delay nil))

;; flx based fuzzy matching for company
(use-package company-flx
  :config (company-flx-mode 1))


(define-key company-active-map (kbd "C-h") 'company-quickhelp-manual-begin)
(define-key company-active-map (kbd "C-n") 'company-select-next)
(define-key company-active-map (kbd "C-p") 'company-select-previous)
(define-key company-active-map (kbd "C-d") 'company-show-doc-buffer)
(define-key company-active-map (kbd "M-.") 'company-show-location)


;; (require 'color)
;; (let ((bg (face-attribute 'default :background)))
;;   (custom-set-faces
;;    `(company-tooltip ((t (:inherit default :background ,(color-lighten-name bg 2)))))
;;    `(company-scrollbar-bg ((t (:background ,(color-lighten-name bg 10)))))
;;    `(company-scrollbar-fg ((t (:background ,(color-lighten-name bg 5)))))
;;    `(company-tooltip-selection ((t (:inherit font-lock-function-name-face))))
;;    `(company-tooltip-common ((t (:inherit font-lock-constant-face))))))
#+END_SRC
- slime
  #+BEGIN_SRC emacs-lisp
(use-package slime-company
  :config (setq slime-company-completion 'fuzzy))  
  #+END_SRC
- Web
  #+BEGIN_SRC emacs-lisp
;; (require 'company-web-html)
(use-package company-web)
(add-hook 'web-mode-hook
          (lambda () 
            (set (make-local-variable 'company-backends)
                 (cons 'company-web-html company-backends))))

(use-package company-tern)
(add-hook 'js2-mode-hook
          (lambda () (set (make-local-variable 'company-backends)
                          (cons 'company-tern company-backends))))
  #+END_SRC


*** Yasnippet
#+begin_src emacs-lisp
(use-package yasnippet
  :diminish yas-minor-mode
  :config (progn
            (yas-global-mode)
            (define-key yas-minor-mode-map (kbd "<tab>") nil)
            (define-key yas-minor-mode-map (kbd "TAB") nil)
            (define-key yas-minor-mode-map (kbd "M-/") 'yas-expand)

            (setq yas-snippet-dirs (concat user-emacs-directory "snippets"))
            
            (add-hook 'hippie-expand-try-functions-list 'yas-hippie-try-expand)
            (setq yas-expand-only-for-last-commands '(self-insert-command))
            
            ))


#+end_src
*** Projectile
#+begin_src emacs-lisp
(use-package projectile
  :diminish projectile-mode
  :commands projectile-mode
  :config (progn
            (projectile-global-mode t)
            (setq projectile-enable-caching t)))
#+end_src

** Programming
*** Flycheck
#+begin_src emacs-lisp
(use-package flycheck
  :config (progn
            ;;(setq flycheck-html-tidy-executable "tidy5")
            (add-hook 'after-init-hook #'global-flycheck-mode)
            ))
#+end_src
** Lisp
*** Rainbow delimiters
#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters)
#+END_SRC
*** Redshank 
#+BEGIN_SRC emacs-lisp
(use-package redshank
  :diminish redshank-mode
  )
#+END_SRC
*** Slime
#+BEGIN_SRC emacs-lisp
;;; Roswell
(load (expand-file-name "~/.roswell/helper.el"))
(setq inferior-lisp-program "ros -Q run")
(setf slime-lisp-implementations
      `((sbcl    ("sbcl" "--dynamic-space-size" "2000"))
        (ccl    ("ccl64"))
        (roswell ("ros" "-Q" "run"))))
(setf slime-default-lisp 'roswell)
#+END_SRC

*** Lispy

#+BEGIN_SRC emacs-lisp
(use-package lispy
  :config
  (progn
    (defun xt3/newline-and-indent ()
      (interactive)
      (if (eq major-mode 'slime-repl-mode)
          (slime-repl-newline-and-indent)
        (lispy-newline-and-indent)))
    (substitute-key-definition 'lispy-newline-and-indent 'xt3/newline-and-indent lispy-mode-map)
    ;; Colon no space
    (defun xt3/lisp-colon ()
      "Insert :."
      (interactive)
      (insert ":"))
    (substitute-key-definition 'lispy-colon 'xt3/lisp-colon lispy-mode-map)
    (add-to-list 'lispy-goto-symbol-alist
                 '(slime-repl-mode lispy-goto-symbol-lisp le-lisp)))
  :bind
  ("C-M-," . lispy-mark))
#+END_SRC
*** Elisp-slime-nav
#+BEGIN_SRC emacs-lisp
(use-package elisp-slime-nav
  :config 
  (dolist (hook '(emacs-lisp-mode-hook ielm-mode-hook))
    (add-hook hook 'elisp-slime-nav-mode))
  )
#+END_SRC

** Swift
#+begin_src emacs-lisp 
(use-package swift-mode) 
#+end_src

** Web
*** Web Mode
#+begin_src emacs-lisp
(use-package web-mode
  :config
  (progn
    (setq web-mode-markup-indent-offset 2)
    (setq web-mode-css-indent-offset 2)
    (setq web-mode-code-indent-offset 2)
    (setq web-mode-enable-current-element-highlight t)
    (setq web-mode-ac-sources-alist
          '(("php" . (ac-source-yasnippet ac-source-php-auto-yasnippets))
            ("html" . (ac-source-emmet-html-aliases ac-source-emmet-html-snippets))
            ("css" . (ac-source-css-property ac-source-emmet-css-snippets))))
    (setq web-mode-enable-auto-closing t) ;; </ -> </..>
    (setq web-mode-enable-current-column-highlight t)
    (setq web-mode-enable-auto-pairing t)
    
    ))

(define-key web-mode-map
  (kbd "<f2>")
  (defhydra hydra-web ()
    "Web mode" 
    ("e/" web-mode-element-close "close")
    ("ea" web-mode-element-content-select "content-select")
    ("eb" web-mode-element-beginning "beginning")
    ("ec" web-mode-element-clone "clone")
    ("ed" web-mode-element-child "child")
    ("ee" web-mode-element-end "end")
    ("ef" web-mode-element-children-fold-or-unfold "fold")
    ("ei" web-mode-element-insert "insert")
    ("ek" web-mode-element-kill "kill")
    ("em" web-mode-element-mute-blanks "mute-blanks")
    ("en" web-mode-element-next "next")
    ("ep" web-mode-element-previous "previous")
    ("er" web-mode-element-rename "rename")
    ("es" web-mode-element-select "select")
    ("et" web-mode-element-transpose "transpose")
    ("eu" web-mode-element-parent "parent")
    ("ev" web-mode-element-vanish "vanish")
    ("ew" web-mode-element-wrap "wrap")))
#+end_src

*** Emmet
#+begin_src emacs-lisp
(use-package emmet-mode
  :config
  (add-hook 'html-mode-hook 'emmet-mode)
  (add-hook 'web-mode-hook 'emmet-mode)
  (add-hook 'css-mode-hook 'emmet-mode)
  (add-hook 'sgml-mode-hook 'emmet-mode) ;; Auto-start on any markup modes
)
#+end_src

*** Impation Mode 
#+BEGIN_SRC emacs-lisp
(use-package impatient-mode)
;; Require: Simple-httpd, Htmlize
#+END_SRC

*** Javascript
- js2
  #+BEGIN_SRC emacs-lisp
(use-package js2-mode)
  #+END_SRC
- tern
  #+BEGIN_SRC emacs-lisp
;; (add-to-list 'load-path "/usr/local/lib/node_modules/tern/emacs/")
;; (autoload 'tern-mode "tern.el" nil t)
(add-hook 'js-mode-hook (lambda () (tern-mode t)))
  #+END_SRC

** Git
*** Magit
#+BEGIN_SRC emacs-lisp
(use-package magit
  :bind ("C-c g" . magit-status)
  :config
  (define-key magit-status-mode-map (kbd "q") 'magit-quit-session))

;; full screen magit-status
(defadvice magit-status (around magit-fullscreen activate)
  (window-configuration-to-register :magit-fullscreen)
  ad-do-it
  (delete-other-windows))

(defun magit-quit-session ()
  "Restores the previous window configuration and kills the magit buffer"
  (interactive)
  (kill-buffer)
  (jump-to-register :magit-fullscreen))

#+END_SRC

* Supply
** Edit
#+BEGIN_SRC elisp
(defun sanityinc/kill-back-to-indentation ()
  "Kill from point back to the first non-whitespace character on the line."
  (interactive)
  (let ((prev-pos (point)))
    (back-to-indentation)
    (kill-region (point) prev-pos)))

(bind-key "C-M-<backspace>" 'sanityinc/kill-back-to-indentation)
#+END_SRC
** Search
#+BEGIN_SRC emacs-lisp
;; Occur
;; takes current region or  symbol at point as  default value for occur
(defun occur-dwim ()
  "Call `occur' with a sane default."
  (interactive)
  (push (if (region-active-p)
            (buffer-substring-no-properties
             (region-beginning)
             (region-end))
          (thing-at-point 'symbol))
        regexp-history)
  (call-interactively 'occur))

(bind-key "M-s o" 'occur-dwim)
#+END_SRC
** Complete
#+BEGIN_SRC emacs-lisp
(defun check-expansion ()
  (save-excursion
    (if (looking-at "\\_>") t
      (backward-char 1)
      (if (looking-at "\\.") t
        (backward-char 1)
        (if (looking-at "->") t nil)))))

(defun tab-indent-or-complete ()
  (interactive)
  (if (minibufferp)
      (minibuffer-complete)
    (if (or (not yas-minor-mode)
            (null (yas-expand)))
        (if (check-expansion)
            (company-complete-common)
          (indent-for-tab-command)))))

(global-set-key [tab] 'tab-indent-or-complete)
#+END_SRC
** Lisp
#+BEGIN_SRC emacs-lisp
(defun xt3/lisp-setup ()
  "Enable features useful in any Lisp mode."
  (rainbow-delimiters-mode t)
  (redshank-mode)
  (lispy-mode 1))

(defconst xt3/elispy-modes
  '(emacs-lisp-mode ielm-mode)
  "Major modes relating to elisp.")

(defconst xt3/lispy-modes
  (append xt3/elispy-modes
          '(lisp-mode inferior-lisp-mode lisp-interaction-mode slime-repl-mode))
  "All lispy major modes.")

(require 'derived)

(dolist (hook (mapcar #'derived-mode-hook-name xt3/lispy-modes))
  (add-hook hook 'xt3/lisp-setup))

(dolist (hook (mapcar #'derived-mode-hook-name xt3/lispy-modes))
  (add-hook hook (lambda ()
                   (set (make-local-variable 'company-backends)
                        (cons 'company-slime company-backends)))))

#+END_SRC
** Web
#+BEGIN_SRC emacs-lisp
(setq auto-mode-alist
      (append
       '(("\\.js\\'" . js2-mode))
       '(("\\.html\\'" . web-mode))
       auto-mode-alist))
#+END_SRC

* ----
* Xt3
#+BEGIN_SRC emacs-lisp
(setq xt3-lisp (expand-file-name "xt3Lisp.el" user-emacs-directory))
(load xt3-lisp)
#+END_SRC
