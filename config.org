#+TITLE: Emacs Configuration
#+AUTHOR: Xt3
#+STARTUP: indent

* Installing Emacs

  On OS X, [[http://brew.sh/][homebrew]] is an easy way to install emacs.

Here's what the parameter means.
- ~--with-cocoa~ :: installs emacs with the OS X GUI version
- ~--with-imagemagick~ :: installs emacs with imagemagick support for image processing
- ~--with-gnutls~ :: installs emacs with GnuTLS to utilize encrypted SSL and TLS connections

#+begin_src sh
brew install emacs --with-cocoa --with-imagemagick --with-gnutls
#+end_src

* Personal Information

#+begin_src emacs-lisp
(setq user-full-name "Xt3"
      user-mail-address "badxt3@gmail.com")
#+end_src

* Customize settings

Set up the customize file to its own separate file, instead of saving
customize settings in [[file:init.el][init.el]].

#+begin_src emacs-lisp
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
(load custom-file)
#+end_src

* Font
We tell Emacs to use the font we want to use.

#+begin_src emacs-lisp
(when (member "Hack" (font-family-list))
  (add-to-list 'initial-frame-alist '(font . "Hack-13"))
  (add-to-list 'default-frame-alist '(font . "Hack-13")))


;;; Emoji
(when (member "Apple Color Emoji" (font-family-list))
  (set-fontset-font t
                  'symbol
                  (font-spec :family "Apple Color Emoji") nil 'prepend))

;; Chinese Font
(when (member "PingFang SC" (font-family-list))
  ;;(message "PingFang can.")
  (unicode-fonts-setup)  ; 我不知道为什么需要这个
  (dolist (charset '(kana han cjk-misc bopomofo))
    (set-fontset-font (frame-parameter nil 'font)
                      charset
                      (font-spec :family "PingFang SC"
                                 :size 13)))
  )

#+end_src

* Theme
** Cyberpunk theme

The [[https://github.com/n3mo/cyberpunk-theme.el][cyberpunk theme]] is dark and colorful. However, I don't like the
boxes around the mode line.

#+begin_src emacs-lisp
(use-package cyberpunk-theme
  :ensure t
  :init
  (progn
    (load-theme 'cyberpunk t)
    (set-face-attribute `mode-line nil
                        :box nil)
    (set-face-attribute `mode-line-inactive nil
                        :box nil)))
#+end_src

I tend to switch themes more often than normal. For example, switching
to a lighter theme (such as the default) or to a different theme
depending on the time of day or my mood. Normally, switching themes is
a multi-step process with ~disable-theme~ and ~load-theme~. The
~switch-theme~ function will do that in one swoop. I just choose which
theme I want to go to.

** Solarized theme

Here's some configuration for [[https://github.com/bbatsov/solarized-emacs/][bbatsov's solarized themes]].

#+begin_src emacs-lisp
(use-package solarized-theme
  :init
  (setq solarized-use-variable-pitch nil)
  :ensure t)
#+end_src

** Monokai theme

#+begin_src emacs-lisp
(setq monokai-use-variable-pitch nil)
#+end_src

** Convenient theme functions

#+begin_src emacs-lisp
(defun switch-theme (theme)
  "Disables any currently active themes and loads THEME."
  ;; This interactive call is taken from `load-theme'
  (interactive
   (list
    (intern (completing-read "Load custom theme: "
                             (mapc 'symbol-name
                                   (custom-available-themes))))))
  (let ((enabled-themes custom-enabled-themes))
    (mapc #'disable-theme custom-enabled-themes)
    (load-theme theme t)))

(defun disable-active-themes ()
  "Disables any currently active themes listed in `custom-enabled-themes'."
  (interactive)
  (mapc #'disable-theme custom-enabled-themes))

(bind-key "s-<f12>" 'switch-theme)
(bind-key "s-<f11>" 'disable-active-themes)
#+end_src

* Defaults 

Let's start with some sane defaults, shall we?

Sources for this section include [[https://github.com/magnars/.emacs.d/blob/master/settings/sane-defaults.el][Magnars Sveen]] and [[http://pages.sachachua.com/.emacs.d/Sacha.html][Sacha Chua]].

#+begin_src emacs-lisp
;; These functions are useful. Activate them.
(put 'downcase-region 'disabled nil)
(put 'upcase-region 'disabled nil)
(put 'narrow-to-region 'disabled nil)
(put 'dired-find-alternate-file 'disabled nil)

;; Answering just 'y' or 'n' will do
(defalias 'yes-or-no-p 'y-or-n-p)

;; Keep all backup and auto-save files in one directory
(setq delete-old-versions t)
(setq version-control t)
(setq vc-make-backup-files t)
(setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
(setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))

;; UTF-8 please
(setq locale-coding-system 'utf-8) ; pretty
(set-terminal-coding-system 'utf-8) ; pretty
(set-keyboard-coding-system 'utf-8) ; pretty
(set-selection-coding-system 'utf-8) ; please
(prefer-coding-system 'utf-8) ; with sugar on top
(when (display-graphic-p)
  (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING)))

;; Turn off the blinking cursor
(blink-cursor-mode -1)

(setq-default indent-tabs-mode nil)
(setq-default indicate-empty-lines t)

;; Don't count two spaces after a period as the end of a sentence.
;; Just one space is needed.
(setq sentence-end-double-space nil)

;; delete the region when typing, just like as we expect nowadays.
(delete-selection-mode t)

(show-paren-mode t)

(column-number-mode t)

(global-visual-line-mode)
(diminish 'visual-line-mode)

(setq uniquify-buffer-name-style 'forward)

;; -i gets alias definitions from .bash_profile
(setq shell-command-switch "-ic")

;; Don't beep at me
(setq visible-bell nil)
(setq ring-bell-function 'ignore)

;; Turn on syntax highlighting for all buffers:
(global-font-lock-mode t)

;; Gui
(setq use-file-dialog nil)
(setq use-dialog-box nil)

;; Macro
(load-file (expand-file-name "macros" user-emacs-directory))

#+end_src

The following function for ~occur-dwim~ is taken from [[https://github.com/abo-abo][Oleh Krehel]] from
[[http://oremacs.com/2015/01/26/occur-dwim/][his blog post at (or emacs]]. It takes the current region or the symbol
at point as the default value for occur.

#+begin_src emacs-lisp
(defun occur-dwim ()
  "Call `occur' with a sane default."
  (interactive)
  (push (if (region-active-p)
            (buffer-substring-no-properties
             (region-beginning)
             (region-end))
          (thing-at-point 'symbol))
        regexp-history)
  (call-interactively 'occur))

(bind-key "M-s o" 'occur-dwim)
#+end_src

* Mac customizations

There are configurations to make when running Emacs on OS X (hence the
"darwin" system-type check).

#+begin_src emacs-lisp
(let ((is-mac (string-equal system-type "darwin")))
  (when is-mac
    ;; delete files by moving them to the trash
    (setq delete-by-moving-to-trash t)
    (setq trash-directory "~/.Trash")

    ;; Don't make new frames when opening a new file with Emacs
    (setq ns-pop-up-frames nil)

    ;; set the Fn key as the hyper key
    (setq ns-function-modifier 'hyper)
    (setq ns-command-modifier 'meta)
    (setq ns-option-modifier 'super)

    ;; Use super-` to switch between Emacs windows (not frames)
    (bind-key "s-`" 'other-window)
    
    ;; Use super-Shift-` to switch Emacs frames in reverse
    (bind-key "s-~" (lambda () (interactive) (other-window -1)))

    ;; Because of the keybindings above, set one for `other-frame'
    (bind-key "s-1" 'other-frame)

    ;; Fullscreen!
    (setq ns-use-native-fullscreen nil) ; Not Lion style
    (bind-key "<s-return>" 'toggle-frame-fullscreen)

    ;; buffer switching
    (bind-key "s-{" 'previous-buffer)
    (bind-key "s-}" 'next-buffer)

    ;; Compiling
    (bind-key "H-c" 'compile)
    (bind-key "H-r" 'recompile)
    (bind-key "H-s" (defun save-and-recompile () (interactive) (save-buffer) (recompile)))

    ;; disable the key that minimizes emacs to the dock because I don't
    ;; minimize my windows
    ;; (global-unset-key (kbd "C-z"))

    (defun open-dir-in-finder ()
      "Open a new Finder window to the path of the current buffer"
      (interactive)
      (shell-command "open ."))
    (bind-key "s-/" 'open-dir-in-finder)

    ;; (defun open-dir-in-iterm ()
    ;;   "Open the current directory of the buffer in iTerm."
    ;;   (interactive)
    ;;   (let* ((iterm-app-path "/Applications/iTerm.app")
    ;;          (iterm-brew-path "/opt/homebrew-cask/Caskroom/iterm2/1.0.0/iTerm.app")
    ;;          (iterm-path (if (file-directory-p iterm-app-path)
    ;;                          iterm-app-path
    ;;                        iterm-brew-path)))
    ;;     (shell-command (concat "open -a " iterm-path " ."))))
    ;; (bind-key "s-=" 'open-dir-in-iterm)

    ;; Not going to use these commands
    (put 'ns-print-buffer 'disabled t)
    (put 'suspend-frame 'disabled t)

    ;; font
    (setq mac-allow-anti-aliasing t)

    ;; Lisp 
    (setq inferior-lisp-program "~/ccl/dx86cl64")

    ))
#+end_src

~exec-path-from-shell~ makes the command-line path with Emacs's shell
match the same one on OS X.

#+begin_src emacs-lisp
(use-package exec-path-from-shell
  :if (memq window-system '(mac ns))
  :ensure t
  :init
  (exec-path-from-shell-initialize))
#+end_src

* Desktop

#+BEGIN_SRC emacs-lisp
;; save a list of open files in ~/.emacs.d/.emacs.desktop
(setq desktop-path (list user-emacs-directory)
      desktop-auto-save-timeout 600)
(desktop-save-mode 1)

(setq-default history-length 1000)
(savehist-mode t)

(use-package session
  :ensure t
  :config
  (setq session-save-file (expand-file-name ".session" user-emacs-directory))
  (add-hook 'after-init-hook 'session-initialize)
  
  )

;; save a bunch of variables to the desktop file
;; for lists specify the len of the maximal saved data also
(setq desktop-globals-to-save
      (append '((comint-input-ring        . 50)
                (compile-history          . 30)
                desktop-missing-file-warning
                (dired-regexp-history     . 20)
                (extended-command-history . 30)
                (face-name-history        . 20)
                (file-name-history        . 100)
                (grep-find-history        . 30)
                (grep-history             . 30)
                (ido-buffer-history       . 100)
                (ido-last-directory-list  . 100)
                (ido-work-directory-list  . 100)
                (ido-work-file-list       . 100)
                (magit-read-rev-history   . 50)
                (minibuffer-history       . 50)
                (org-clock-history        . 50)
                (org-refile-history       . 50)
                (org-tags-history         . 50)
                (query-replace-history    . 60)
                (read-expression-history  . 60)
                (regexp-history           . 60)
                (regexp-search-ring       . 20)
                register-alist
                (search-ring              . 20)
                (shell-command-history    . 50)
                tags-file-name
                tags-table-list)))

(use-package frame-restore
  :ensure t
  )
#+END_SRC

* List buffers

ibuffer is the improved version of list-buffers.

#+begin_src emacs-lisp
;; make ibuffer the default buffer lister.
(defalias 'list-buffers 'ibuffer)
#+end_src


source: http://ergoemacs.org/emacs/emacs_buffer_management.html

#+begin_src emacs-lisp
(add-hook 'dired-mode-hook 'auto-revert-mode)

;; Also auto refresh dired, but be quiet about it
(setq global-auto-revert-non-file-buffers t)
(setq auto-revert-verbose nil)
#+end_src

source: [[http://whattheemacsd.com/sane-defaults.el-01.html][Magnars Sveen]]

* Recentf

#+begin_src emacs-lisp
(use-package recentf
  :commands ido-recentf-open
  :init
  (progn
    (recentf-mode t)
    (setq recentf-max-saved-items 200)

    (defun ido-recentf-open ()
      "Use `ido-completing-read' to \\[find-file] a recent file"
      (interactive)
      (if (find-file (ido-completing-read "Find recent file: " recentf-list))
          (message "Opening file...")
        (message "Aborting")))

    (bind-key "C-x C-r" 'ido-recentf-open)))
#+end_src

* Org-mode

Truly the way to [[http://orgmode.org/][live life in plain text]]. I mainly use it to take
notes and save executable source blocks. I'm also starting to make use
of its agenda, timestamping, and capturing features.

It goes without saying that I also use it to manage my Emacs config.

** Org setup

Speed commands are a nice and quick way to perform certain actions
while at the beginning of a heading. It's not activated by default.

See the doc for speed keys by checking out [[elisp:(info%20"(org)%20speed%20keys")][the documentation for
speed keys in Org mode]].

#+begin_src emacs-lisp
(setq org-use-speed-commands t)
#+end_src

#+begin_src emacs-lisp
(setq org-image-actual-width 550)
#+end_src

** Org activation bindings

Set up some global key bindings that integrate with Org Mode features.

#+begin_src emacs-lisp
(bind-key "C-c l" 'org-store-link)
(bind-key "C-c c" 'org-capture)
(bind-key "C-c a" 'org-agenda)
#+end_src

** Org agenda -
[[https://github.com/sachac/.emacs.d/blob/83d21e473368adb1f63e582a6595450fcd0e787c/Sacha.org#org-agenda][Learned about this =delq= and =mapcar= trick from Sacha Chua's config]].

#+begin_src emacs-lisp

#+end_src

** Org capture +

#+begin_src emacs-lisp
;(bind-key "C-c c" 'org-capture)
;(setq org-default-notes-file "~/Dropbox/Notes/notes.org")

(setq org-capture-templates
      '(("t" "Todo" entry (file+headline "~/org/gtd.org" "Tasks")
         "* TODO %?\n  %i\n  %a")
        ("j" "Journal" entry (file+datetree "~/org/journal.org")
	 "* %?\nEntered on %U\n  %i\n  %a" :clock-resume t)
        ("n" "Notes" entry (file+headline "~/org/notes.org" "Notes")
	 "* %?\nEntered on %U\n  %i\n  %a" :clock-resume t)))

#+end_src


** tags

The default value is -77, which is weird for smaller width windows.
I'd rather have the tags align horizontally with the header. 45 is a
good column number to do that.

#+begin_src emacs-lisp
(setq org-tags-column 45)
#+end_src

** clock
To save the clock history across Emacs sessions
#+BEGIN_SRC elisp
(setq org-clock-persist ’history)
(org-clock-persistence-insinuate)
#+END_SRC
** babel languages
#+begin_src emacs-lisp
(org-babel-do-load-languages
 'org-babel-load-languages
 '((python . t)
   (C . t)
   (calc . t)
   (latex . t)
   (java . t)
   (ruby . t)
   (scheme . t)
   (sh . t)
   (sqlite . t)
   (js . t)))

(defun my-org-confirm-babel-evaluate (lang body)
  "Do not confirm evaluation for these languages."
  (not (or (string= lang "C")
           (string= lang "java")
           (string= lang "python")
           (string= lang "emacs-lisp")
           (string= lang "sqlite"))))
(setq org-confirm-babel-evaluate 'my-org-confirm-babel-evaluate)
#+end_src

** babel/source blocks

I like to have source blocks properly syntax highlighted and with the
editing popup window staying within the same window so all the windows
don't jump around. Also, having the top and bottom trailing lines in
the block is a waste of space, so we can remove them.

I noticed that fontification doesn't work with markdown mode when the
block is indented after editing it in the org src buffer---the leading
#s for headers don't get fontified properly because they appear as Org
comments. Setting ~org-src-preserve-indentation~ makes things
consistent as it doesn't pad source blocks with leading spaces.

#+begin_src emacs-lisp
(setq org-src-fontify-natively t
      org-src-window-setup 'current-window
      org-src-strip-leading-and-trailing-blank-lines t
      org-src-preserve-indentation t
      org-src-tab-acts-natively t)
#+end_src

** exporting !
   
*** Pandoc exporter

Pandoc converts between a huge number of different file formats. 

#+begin_src emacs-lisp
(use-package ox-pandoc
  :no-require t
  :ensure t)
#+end_src

* Tramp
#+begin_src emacs-lisp :tangle no
(use-package tramp)
#+end_src

* Locate

Using OS X Spotlight within Emacs by modifying the ~locate~ function.

I usually use [[*Helm][~helm-locate~]], which does live updates the spotlight
search list as you type a query.

#+begin_src emacs-lisp
;; mdfind is the command line interface to Spotlight
(setq locate-command "mdfind")
#+end_src

* Shell

#+begin_src emacs-lisp
(bind-key "C-x m" 'shell)
(bind-key "C-x M" 'ansi-term)
#+end_src

* Window

  Convenient keybindings to resize windows.

#+begin_src emacs-lisp
(bind-key "s-C-<left>"  'shrink-window-horizontally)
(bind-key "s-C-<right>" 'enlarge-window-horizontally)
(bind-key "s-C-<down>"  'shrink-window)
(bind-key "s-C-<up>"    'enlarge-window)
#+end_src

Whenever I split windows, I usually do so and also switch to the other
window as well, so might as well rebind the splitting key bindings to
do just that to reduce the repetition.

#+begin_src emacs-lisp
(defun vsplit-other-window ()
  "Splits the window vertically and switches to that window."
  (interactive)
  (split-window-vertically)
  (other-window 1 nil))
(defun hsplit-other-window ()
  "Splits the window horizontally and switches to that window."
  (interactive)
  (split-window-horizontally)
  (other-window 1 nil))

(bind-key "C-x 2" 'vsplit-other-window)
(bind-key "C-x 3" 'hsplit-other-window)
#+end_src

** Winner mode

Winner mode allows you to undo/redo changes to window changes in Emacs
and allows you.

#+begin_src emacs-lisp
(winner-mode t)
#+end_src

** Transpose frame -

#+begin_src emacs-lisp
(use-package transpose-frame
  :ensure t
  :bind ("s-M-t" . transpose-frame))
#+end_src
   
* Mode line format
Display a more compact mode line
#+BEGIN_SRC emacs-lisp
(use-package smart-mode-line
  :defer t
  :ensure t
  :config
  (progn
  (setq-default
   mode-line-format
   '("%e"
     mode-line-front-space
     mode-line-mule-info
     mode-line-client
     mode-line-modified
     mode-line-remote
     mode-line-frame-identification
     mode-line-buffer-identification
     "   "
     mode-line-position
     (vc-mode vc-mode)
     "  "
     mode-line-modes
     mode-line-misc-info
     mode-line-end-spaces))))
#+END_SRC

* Ido

#+begin_src emacs-lisp
(use-package ido
  :init
  (progn
    (setq ido-enable-flex-matching t)
    (setq ido-everywhere t)
    (ido-mode t)
    ;; (use-package ido-ubiquitous
    ;;   :ensure t
    ;;   :init (ido-ubiquitous-mode))
    (use-package ido-vertical-mode
      :ensure t
      :init (ido-vertical-mode 1)
      (setq ido-vertical-define-keys 'C-n-and-C-p-only))
    ))
#+end_src

* Whitespace mode

#+begin_src emacs-lisp
(use-package whitespace
  :bind ("s-<f10>" . whitespace-mode))
#+end_src

* Edit

#+BEGIN_SRC emacs-lisp
(use-package whole-line-or-region
  :ensure t
  :diminish whole-line-or-region-mode
  :config
  (whole-line-or-region-mode t)
  (make-variable-buffer-local 'whole-line-or-region-mode)
)


#+END_SRC

* Dired
#+BEGIN_SRC emacs-lisp

(setq dired-isearch-filenames 'dwim)
(setq-default diredp-hide-details-initially-flag nil
              dired-dwim-target t)

(use-package dired+
  :ensure t
  :config
  )

(use-package dired-sort
  :ensure t
  )

;; (use-package diff-hl
;;   :ensure t
;;   :config (add-hook 'dired-mode-hook 'diff-hl-dired-mode))
#+END_SRC
* Undo tree mode
 
visualize your undos and branches

People often struggle with the Emacs undo model, where there's really no concept of "redo" - you simply undo the undo.

This lets you use C-x u (undo-tree-visualize) to visually walk through the changes you've made, undo back to a certain point (or redo), and go down different branches.
#+BEGIN_SRC emacs-lisp
(use-package undo-tree
  :defer t
  :ensure t
  :diminish undo-tree-mode
  :config
  (progn
    (global-undo-tree-mode)
    (setq undo-tree-visualizer-timestamps t)
    (setq undo-tree-visualizer-diff t)
    ;(define-key undo-tree-map (kbd "C-x u") 'undo-tree-visualize)
    ;(define-key undo-tree-map (kbd "C-/") 'undo-tree-undo)
    )
  )
#+END_SRC

* Lisp

#+BEGIN_SRC emacs-lisp

;(define-key lisp-interaction-mode-map (kbd "s-j") 'eval-print-last-sexp)
(global-set-key (kbd "s-j") 'eval-print-last-sexp)

(use-package elisp-slime-nav
  :ensure t
  :config 
  (dolist (hook '(emacs-lisp-mode-hook ielm-mode-hook))
    (add-hook hook 'elisp-slime-nav-mode))
  )

(use-package rainbow-delimiters
  :ensure t
  )

(use-package redshank
  :ensure t
  :diminish redshank-mode
  )

#+END_SRC


** Slime

#+BEGIN_SRC emacs-lisp

(use-package slime-company
  :ensure t
  )

(use-package slime
  :ensure t
  :config
  (require 'slime-autoloads)
  ;(setq inferior-lisp-program "~/ccl/dx86cl64")
  (setq slime-contribs '(slime-fancy))
  (use-package ac-slime :ensure t)
  (use-package hippie-expand-slime :ensure t)
  (when (executable-find "sbcl")
    (add-to-list 'slime-lisp-implementations
                 '(sbcl ("sbcl") :coding-system utf-8-unix)))
  (when (executable-find "scheme")
    (add-to-list 'slime-lisp-implementations
                 '(scheme ("scheme") :coding-system utf-8-unix)))
  (when (executable-find "ccl")
    (add-to-list 'slime-lisp-implementations
                 '(ccl ("ccl") :coding-system utf-8-unix)))
  (setq slime-protocol-version 'ignore)
  (setq slime-net-coding-system 'utf-8-unix)

  (setq slime-complete-symbol*-fancy t)
  (setq slime-complete-symbol-function 'slime-fuzzy-complete-symbol)
  
  (slime-setup '(slime-repl slime-fuzzy slime-company))

  )

(defun sanityinc/slime-repl-setup ()
  "Mode setup function for slime REPL."
  (xt3/lisp-setup)
  (set-up-slime-hippie-expand)
  (set-up-slime-ac t)
  (setq show-trailing-whitespace nil))

;; (eval-after-load 'slime-repl
;;   ;; Stop SLIME's REPL from grabbing DEL, which is annoying when backspacing over a '('
;; (progn
;;   (eval-after-load 'paredit 
;;     (define-key slime-repl-mode-map (read-kbd-macro paredit-backward-delete-key) nil))

;;   ;; Bind TAB to `indent-for-tab-command', as in regular Slime buffers.
;;   (define-key slime-repl-mode-map (kbd "TAB") 'indent-for-tab-command)

(add-hook 'slime-repl-mode-hook 'sanityinc/slime-repl-setup)

;(eval-after-load 'auto-complete
 ; (add-to-list 'ac-modes 'slime-repl-mode))




#+END_SRC

** ParEdit
ParEdit is a minor mode for performing structured editing of S-expression
data.

#+BEGIN_SRC emacs-lisp

(use-package paredit
  :ensure t
  :diminish " Par"
  :config
  (progn 
    (autoload 'enable-paredit-mode "paredit") 

    (defun maybe-map-paredit-newline ()
      (unless (or (memq major-mode '(inferior-emacs-lisp-mode cider-repl-mode))
                  (minibufferp))
        (local-set-key (kbd "RET") 'paredit-newline)))
    (add-hook 'paredit-mode-hook 'maybe-map-paredit-newline)

    ;(diminish 'paredit-mode " Par")

    ;; (dolist (binding (list (kbd "C-<left>") (kbd "C-<right>")
    ;;                        (kbd "C-M-<left>") (kbd "C-M-<right>")))
    ;;   (define-key paredit-mode-map binding nil))

    ;; Disable kill-sentence, which is easily confused with the kill-sexp
    ;; binding, but doesn't preserve sexp structure
    ;(define-key paredit-mode-map [remap kill-sentence] nil)
    ;(define-key paredit-mode-map [remap backward-kill-sentence] nil)

            
    (defvar paredit-minibuffer-commands '(eval-expression
                                          pp-eval-expression
                                          eval-expression-with-eldoc
                                          ibuffer-do-eval
                                          ibuffer-do-view-and-eval)
      "Interactive commands for which paredit should be enabled in the minibuffer.")

    (defun conditionally-enable-paredit-mode ()
      "Enable paredit during lisp-related minibuffer commands."
      (if (memq this-command paredit-minibuffer-commands)
          (enable-paredit-mode)))

    ;; Use paredit in the minibuffer
    ;; TODO: break out into separate package
    ;; http://emacsredux.com/blog/2013/04/18/evaluate-emacs-lisp-in-the-minibuffer/
    (add-hook 'minibuffer-setup-hook 'conditionally-enable-paredit-mode)
    )
  )

(use-package paredit-everywhere
  :ensure t
  :config
  (add-hook 'prog-mode-hook 'paredit-everywhere-mode)
  (add-hook 'css-mode-hook 'paredit-everywhere-mode)
  )

#+END_SRC

** Eldoc
Eldoc provides minibuffer hints when working with Emacs Lisp.

#+BEGIN_SRC emacs-lisp
(use-package "eldoc"
  :diminish eldoc-mode
  :commands turn-on-eldoc-mode
  :defer t
  :init
  (progn
  (add-hook 'emacs-lisp-mode-hook 'turn-on-eldoc-mode)
  (add-hook 'lisp-interaction-mode-hook 'turn-on-eldoc-mode)
  (add-hook 'ielm-mode-hook 'turn-on-eldoc-mode)))
#+END_SRC

** Sext
#+BEGIN_SRC emacs-lisp

;; Hippie-expand
(defun my/emacs-lisp-module-name ()
  "Search the buffer for `provide' declaration."
  (save-excursion
    (goto-char (point-min))
    (when (search-forward-regexp "^(provide '" nil t)
      (symbol-name (symbol-at-point)))))

;; Credit to Chris Done for this one.
(defun my/try-complete-lisp-symbol-without-namespace (old)
  "Hippie expand \"try\" function which expands \"-foo\" to \"modname-foo\" in elisp."
  (unless old
    (he-init-string (he-lisp-symbol-beg) (point))
    (when (string-prefix-p "-" he-search-string)
      (let ((mod-name (my/emacs-lisp-module-name)))
        (when mod-name
          (setq he-expand-list (list (concat mod-name he-search-string)))))))
  (when he-expand-list
    (he-substitute-string (car he-expand-list))
    (setq he-expand-list nil)
    t))

(defun set-up-hippie-expand-for-elisp ()
  "Locally set `hippie-expand' completion functions for use with Emacs Lisp."
  (make-local-variable 'hippie-expand-try-functions-list)
  (add-to-list 'hippie-expand-try-functions-list 'try-complete-lisp-symbol t)
  (add-to-list 'hippie-expand-try-functions-list 'try-complete-lisp-symbol-partially t)
  (add-to-list 'hippie-expand-try-functions-list 'my/try-complete-lisp-symbol-without-namespace t))

(defun xt3/lisp-setup ()
  "Enable features useful in any Lisp mode."
  (rainbow-delimiters-mode t)
  (enable-paredit-mode)
  (turn-on-eldoc-mode)
  (redshank-mode)
  (add-hook 'after-save-hook #'check-parens nil t))

(defun xt3/emacs-lisp-setup ()
  "Enable features useful when working with elisp."
  (set-up-hippie-expand-for-elisp)
  ;(ac-emacs-lisp-mode-setup)
)

(defconst xt3/elispy-modes
  '(emacs-lisp-mode ielm-mode)
  "Major modes relating to elisp.")

(defconst xt3/lispy-modes
  (append xt3/elispy-modes
          '(lisp-mode inferior-lisp-mode lisp-interaction-mode))
  "All lispy major modes.")

;; (dolist (hook xt3/lispy-modes)
;;   (add-hook hook 'xt3/lisp-setup))

;; (dolist (hook xt3/elispy-modes)
;;   (add-hook hook 'xt3/emacs-lisp-setup))

(require 'derived)

(dolist (hook (mapcar #'derived-mode-hook-name xt3/lispy-modes))
  (add-hook hook 'xt3/lisp-setup))

(dolist (hook (mapcar #'derived-mode-hook-name xt3/elispy-modes))
  (add-hook hook 'xt3/emacs-lisp-setup))

#+END_SRC

* C

#+BEGIN_SRC emacs-lisp
;; (setq c-tab-always-indent nil
;;         c-insert-tab-function 'indent-for-tab-command
;;         )

;(define-key c-mode-map (kbd "C-M-\\") 'c-indent-line-or-region)
(global-set-key (kbd "C-M-\\") 'c-indent-line-or-region)
;(define-key c-mode-map [remap c-indent-line-or-region] nil)
;(define-key c-mode-map (kbd "TAB") 'company-complete)
#+END_SRC

* Packages

These are the packages that are not built into Emacs.

** Ace Jump Mode

A quick way to jump around text in buffers.

[[http://emacsrocks.com/e10.html][See Emacs Rocks Episode 10 for a screencast.]]

#+begin_src emacs-lisp
(use-package ace-jump-mode
  :ensure t
  :diminish ace-jump-mode
  :commands ace-jump-mode
  :bind ("C-S-s" . ace-jump-mode))
#+end_src

** Ace Window

[[https://github.com/abo-abo/ace-window][ace-window]] is a package that uses the same idea from ace-jump-mode for
buffer navigation, but applies it to windows. The default keys are
1-9, but it's faster to access the keys on the home row, so that's
what I have them set to (with respect to Dvorak, of course).

#+begin_src emacs-lisp
(use-package ace-window
  :ensure t
  :config
  (setq aw-keys '(?a ?o ?e ?u ?h ?t ?n ?s))
  (ace-window-display-mode)
  :bind ("H-o" . ace-window))
#+end_src

** Auto-Complete 

#+BEGIN_SRC emacs-lisp
(use-package auto-complete
  :ensure t
  :disabled t
  :config 
  (require 'auto-complete-config)
  (ac-config-default)
                                        ;(add-to-list 'ac-dictionary-directories "~/.emacs.d/ac-dict")
  (setq-default ac-expand-on-auto-complete nil)
  (setq-default ac-auto-start nil)
  (setq-default ac-dwim nil)
  (setq tab-always-indent 'complete)  ;; use 't when auto-complete is disabled
  (add-to-list 'completion-styles 'initials t)
  ;; Stop completion-at-point from popping up completion buffers so eagerly
  (setq completion-cycle-threshold 5)
  (global-auto-complete-mode t)
  
  (setq c-tab-always-indent nil
        c-insert-tab-function 'indent-for-tab-command)
  (set-default 'ac-sources
               '(ac-source-imenu
                 ac-source-yasnippet
                 ac-source-dictionary
                 ac-source-words-in-buffer
                 ac-source-words-in-same-mode-buffers
                 ac-source-words-in-all-buffer))

  (dolist (mode '(magit-log-edit-mode
                  log-edit-mode org-mode text-mode haml-mode
                  git-commit-mode
                  sass-mode yaml-mode csv-mode espresso-mode haskell-mode
                  html-mode nxml-mode sh-mode smarty-mode clojure-mode
                  lisp-mode lisp-mode inferior-lisp-mode lisp-interaction-mode
                  emacs-lisp-mode ielm-mode inferior-emacs-lisp-mode
                  textile-mode markdown-mode tuareg-mode
                  js3-mode css-mode less-css-mode sql-mode
                  sql-interactive-mode
                  ))
    (add-to-list 'ac-modes mode))

                                        ;(set-face-background 'ac-candidate-face "lightgray")
                                        ;(set-face-underline 'ac-candidate-face "darkgray")
                                        ;(set-face-background 'ac-selection-face "steelblue")
  )

(use-package company
  :ensure t
  ;; :disabled t
  :config
  (add-to-list 'company-backends 'company-capf t)
  (add-to-list 'company-backends 'company-clang t)
  (add-to-list 'company-backends 'company-dabbrev t)
  (add-to-list 'company-backends 'company-ispell t)
  (add-to-list 'company-backends 'company-files t)
  (add-to-list 'company-backends 'company-css t)
  (add-to-list 'company-backends 'company-nxml t)
  ;(add-to-list 'company-backends 'company-ropemacs t)
  (add-to-list 'company-backends 'company-yasnippet t)
  ;(add-to-list 'company-backends 'company-tern t)
  ;; not always down case
  (setq company-dabbrev-downcase nil)

  (add-hook 'after-init-hook 'global-company-mode)
  (setq company-auto-complete nil)

  (setq company-show-numbers t)
  (setq company-idle-delay 0)
  
  ;(global-set-key (kbd "TAB") 'company-complete)
  (use-package company-statistics
    :ensure t
    :config
    (add-hook 'after-init-hook 'company-statistics-mode)
    )
  )

(defun check-expansion ()
  (save-excursion
    (if (looking-at "\\_>") t
      (backward-char 1)
      (if (looking-at "\\.") t
        (backward-char 1)
        (if (looking-at "->") t nil)))))

(defun do-yas-expand ()
  (let ((yas/fallback-behavior 'return-nil))
    (yas/expand)))

(defun tab-indent-or-complete ()
  (interactive)
  (if (minibufferp)
      (minibuffer-complete)
    (if (or (not yas/minor-mode)
            (null (do-yas-expand)))
        (if (check-expansion)
            (company-complete-common)
          (indent-for-tab-command)))))

(global-set-key [tab] 'tab-indent-or-complete)

#+END_SRC

** C-Eldoc
   :PROPERTIES:
   :GitHub:   https://github.com/mooz/c-eldoc
   :END:

This package displays function signatures in the mode line.

#+begin_src emacs-lisp
(use-package c-eldoc
  :commands c-turn-on-eldoc-mode
  :ensure t
  :init (add-hook 'c-mode-hook 'c-turn-on-eldoc-mode))
#+end_src

** Clojure -

#+begin_src emacs-lisp

#+end_src

** Command log mode

   https://github.com/lewang/command-log-mode

** Dash

Integration with [[http://kapeli.com/dash][Dash, the API documentation browser on OS X]]. The
binding ~s-D~ is the same as Cmd-Shift-D, the same binding that dash
uses in Android Studio (trying to keep things consistent with the
tools I use).

#+begin_src emacs-lisp
(use-package dash-at-point
  :ensure t
  :bind (("s-D"     . dash-at-point)
         ("C-c e"   . dash-at-point-with-docset)))
#+end_src

** Helm

#+begin_src emacs-lisp
(use-package helm
  :ensure t
  :diminish helm-mode
  :init (progn
          (require 'helm-config)
          (use-package helm-projectile
            :ensure t
            :commands helm-projectile
            :bind ("C-c p h" . helm-projectile))
          (use-package helm-ag :ensure t)
          (setq helm-locate-command "mdfind -interpret -name %s %s"
                 helm-exit-idle-delay 0.1
                 helm-input-idle-delay 0.01
                 helm-idle-delay 0.01
                 ;; truncate long lines in helm completion
                                        ; helm-truncate-lines t
                 ;; may be overridden if 'ggrep' is in path (see below)
                 helm-grep-default-command
                 "grep -a -d skip %e -n%cH -e %p %f"
                 helm-grep-default-recurse-command
                 "grep -a -d recurse %e -n%cH -e %p %f"
                 ;; do not display invisible candidates
                 helm-quick-update t
                 ;; open helm buffer in another window
                 helm-split-window-default-side 'other
                 ;; open helm buffer inside current window, don't occupy whole other window
                 helm-split-window-in-side-p t
                 ;; limit the number of displayed canidates
                 helm-candidate-number-limit 200
                 ;; don't use recentf stuff in helm-ff
                 ;helm-ff-file-name-history-use-recentf nil
                 ;; move to end or beginning of source when reaching top or bottom
                 ;; of source
                 ;helm-move-to-line-cycle-in-source t
                 ;; don't displace the header line
                 ;helm-display-header-line nil
                 ;; fuzzy matching
                 helm-M-x-fuzzy-match t
                 helm-buffers-fuzzy-matching t
                 helm-semantic-fuzzy-match t
                 helm-imenu-fuzzy-match t
                 helm-completion-in-region-fuzzy-match t
                 helm-recentf-fuzzy-match t
                 helm-ag-fuzzy-match t
                 helm-locate-fuzzy-match t
                 projectile-indexing-method 'alien
                 helm-ff-newfile-prompt-p nil
                 )
          (setq helm-yas-display-key-on-candidate t
                helm-M-x-requires-pattern nil
                helm-ff-skip-boring-files t)
           
          (helm-mode))
  :bind
  (("C-c h" . helm-command-prefix)
   ("C-x b" . helm-mini)
   ("C-x C-b" . helm-buffers-list)
   ("C-`" . helm-resume)
   ("M-x" . helm-M-x)
   ("C-x C-f" . helm-find-files)
   ("M-y" . helm-show-kill-ring)
   ("C-x c SPC" . helm-all-mark-rings)
   
   ("C-h a" . helm-apropos)
   ("C-c h o" . helm-occur)
   ("C-c h s" . helm-swoop)
   
   ("C-c h y" . helm-yas-complete)
   ("C-c h Y" . helm-yas-create-snippet-on-region)

   ;("C-c h t" . helm-world-time)
   
   ("C-c h m" . helm-man-woman)
   ("C-c h a" . helm-do-ag)
   ("M-g >" . helm-ag-this-file)
   ("M-g ," . helm-ag-pop-stack)
   ("M-g ." . helm-do-grep)
   ;("C-x C-i" . helm-semantic-or-imenu)
 
   )
 
  )

                                        ;Great for describing bindings. I'll replace the binding for where-is too.
(use-package helm-descbinds
  :ensure t
  :defer t
  :bind (("C-h b" . helm-descbinds)
         ("C-h w" . helm-descbinds)))

(use-package helm-swoop
  :ensure t
  :bind (("M-i" . helm-swoop)
         ("M-I" . helm-swoop-back-to-last-point)
         ("C-c M-i" . helm-multi-swoop))
  :config
  (progn
    ;; When doing isearch, hand the word over to helm-swoop
    (define-key isearch-mode-map (kbd "M-i") 'helm-swoop-from-isearch)
    ;; From helm-swoop to helm-multi-swoop-all
    (define-key helm-swoop-map (kbd "M-i") 'helm-multi-swoop-all-from-helm-swoop)
    ;; Save buffer when helm-multi-swoop-edit complete
    (setq helm-multi-swoop-edit-save t
          ;; If this value is t, split window inside the current window
          helm-swoop-split-with-multiple-windows nil
          ;; Split direcion. 'split-window-vertically or 'split-window-horizontally
          helm-swoop-split-direction 'split-window-vertically
          ;; If nil, you can slightly boost invoke speed in exchange for text color
          helm-swoop-speed-or-color nil)))
#+end_src

** Magit

A great interface for git projects. It's much more pleasant to use
than the git interface on the command line. Use an easy keybinding to
access magit.

#+begin_src emacs-lisp
(use-package magit
  :ensure t
  :bind ("C-c g" . magit-status)
  :config
  (define-key magit-status-mode-map (kbd "q") 'magit-quit-session))
#+end_src

*** Fullscreen magit

#+BEGIN_QUOTE
The following code makes magit-status run alone in the frame, and then
restores the old window configuration when you quit out of magit.

No more juggling windows after commiting. It's magit bliss.
#+END_QUOTE
[[http://whattheemacsd.com/setup-magit.el-01.html][Source: Magnar Sveen]]

#+begin_src emacs-lisp
;; full screen magit-status
(defadvice magit-status (around magit-fullscreen activate)
  (window-configuration-to-register :magit-fullscreen)
  ad-do-it
  (delete-other-windows))

(defun magit-quit-session ()
  "Restores the previous window configuration and kills the magit buffer"
  (interactive)
  (kill-buffer)
  (jump-to-register :magit-fullscreen))
#+end_src

** Edit With Emacs

Editing input boxes from Chrome with Emacs. Pretty useful to keep all
significant text-writing on the web within emacs. I typically use this
with posts on Discourse, which has a post editor that overrides normal
Emacs key bindings with other functions. As such, ~markdown-mode~ is
used.

#+begin_src emacs-lisp
(use-package edit-server
  :ensure t
  :config
  (edit-server-start)
  (setq edit-server-default-major-mode 'markdown-mode)
  (setq edit-server-new-frame nil))
#+end_src

** Elfeed -

#+begin_src emacs-lisp :tangle no

#+end_src

** Emacs IPython Notebook -
#+begin_src emacs-lisp
;; (use-package ein                        
;;   :ensure t)
#+end_src

** Expand region

#+begin_src emacs-lisp
(use-package expand-region
  :ensure t
  :bind ("C-@" . er/expand-region))
#+end_src

** Floobits

Using [[https://floobits.com/][Floobits]] for code collaboration.

#+begin_src emacs-lisp :tangle no
(use-package floobits
  :ensure t)
#+end_src

** Flycheck

Still need to set up hooks so that flycheck automatically runs in
python mode, etc. js2-mode is already really good for the syntax
checks, so I probably don't need the jshint checks with flycheck for
it.

#+begin_src emacs-lisp
(use-package flycheck
  :ensure t
  :config 
  ;;(setq flycheck-html-tidy-executable "tidy5")
  (add-hook 'after-init-hook #'global-flycheck-mode))
#+end_src

*** Linter setups

Install the HTML5/CSS/JavaScript linters.

#+begin_src sh
brew tap homebrew/dupes
brew install tidy
npm install -g jshint
npm install -g csslint
#+end_src

** Gists

#+BEGIN_SRC emacs-lisp
(use-package gist
  :ensure t
  :commands gist-list)
#+END_SRC

** Help-guide-key
It's hard to remember keyboard shortcuts. The guide-key package pops up help after a short delay. [[https://github.com/kai2nenobu/guide-key][guide-key]]

#+BEGIN_SRC emacs-lisp
(use-package guide-key
 ; :defer t
                                        ;:disabled t
  :diminish guide-key-mode
  :config
  (progn
;    (setq guide-key/guide-key-sequence '("C-x r" "C-x" "C-c"))
    (setq guide-key/guide-key-sequence '("C-x" "C-c" "C-x 4" "C-x 5" "C-c ;" "C-c ; f" "C-c ' f" "C-x n" "C-x C-r" "C-x r"))
    ;(setq guide-key/recursive-key-sequence-flag t)
    ;; (setq guide-key/highlight-command-regexp
    ;;   '("rectangle"
    ;;     ("register" . font-lock-type-face)
    ;;     ("bookmark" . "hot pink")))

                                        ;(setq guide-key/idle-delay 0.1)
    (setq guide-key/popup-window-position 'bottom)
    (setq guide-key/text-scale-amount -1)
    
    ;; (defun guide-key/my-hook-function-for-org-mode ()
    ;;   (guide-key/add-local-guide-key-sequence "C-c")
    ;;   (guide-key/add-local-guide-key-sequence "C-c C-x")
    ;;   (guide-key/add-local-highlight-command-regexp "org-"))
    ;; (add-hook 'org-mode-hook 'guide-key/my-hook-function-for-org-mode)
    ;; (setq guide-key/guide-key-sequence
    ;;   '("C-x r" "C-x 4"
    ;;     (org-mode "C-c C-x")
    ;;     (outline-minor-mode "C-c @")))
    (guide-key-mode 1))
  
  (add-hook 'dired-mode-hook
          (lambda () (guide-key/add-local-guide-key-sequence "%")))

  )  ; Enable guide-key-mode
#+END_SRC

** Macrostep

Macrostep allows you to see what Elisp macros expand to. Learned about
it from the [[https://www.youtube.com/watch?v%3D2TSKxxYEbII][package highlight talk for use-package]].

#+begin_src emacs-lisp
(use-package macrostep
  :ensure t
  :bind ("s-m" . macrostep-expand))
#+end_src

** Markdown mode

#+begin_src emacs-lisp
(use-package markdown-mode
  :ensure t
  :mode (("\\.markdown\\'" . markdown-mode)
         ("\\.md\\'"       . markdown-mode)))
#+end_src

** Multiple cursors

We'll also need to ~(require 'multiple-cusors)~ because of [[https://github.com/magnars/multiple-cursors.el/issues/105][an autoload issue]].

#+begin_src emacs-lisp
(use-package multiple-cursors
  :ensure t
  :init (require 'multiple-cursors)
  :bind (("C-S-c C-S-c" . mc/edit-lines)
         ("C->"         . mc/mark-next-like-this)
         ("C-<"         . mc/mark-previous-like-this)
         ("C-c C-<"     . mc/mark-all-like-this)
         ("C-!"         . mc/mark-next-symbol-like-this)
         ("s-d"         . mc/mark-all-dwim)))
#+end_src

** Nyan -
#+BEGIN_SRC emacs-lisp
;; (use-package nyan-mode
;;   :ensure t)
#+END_SRC

** Olivetti

#+begin_src emacs-lisp
(use-package olivetti
  :ensure t
  :bind ("s-<f6>" . olivetti-mode))
#+end_src

** Perspective

Workspaces in Emacs.

#+begin_src emacs-lisp :tangle no
(use-package perspective
  :ensure t
  :config (persp-mode))
#+end_src

** Projectile

#+BEGIN_QUOTE
Project navigation and management library for Emacs.
#+END_QUOTE
http://batsov.com/projectile/


#+begin_src emacs-lisp
(use-package projectile
  :ensure t
  :diminish projectile-mode
  :commands projectile-mode
  :config
  (progn
    (projectile-global-mode t)
    (setq projectile-enable-caching t)
    (use-package ag
      :commands ag
      :ensure t)))
#+end_src

** Python

Integrates with IPython.

#+begin_src emacs-lisp :tangle no
(use-package python-mode
  :ensure t)
#+end_src

** Racket -

Starting to use Racket now, mainly for programming paradigms class,
though I'm looking forward to some "REPL-driven development" whenever
I get the chance.

#+begin_src emacs-lisp
;; (use-package racket-mode
;;   :ensure t
;;   :config
;;   (setq racket-smart-open-bracket-enable t))

;; (use-package geiser
;;   :ensure t)
#+end_src

** Restclient -

See [[http://emacsrocks.com/e15.html][Emacs Rocks! Episode 15]] to learn how restclient can help out with
testing APIs from within Emacs. The HTTP calls you make in the buffer
aren't constrainted within Emacs; there's the
=restclient-copy-curl-command= to get the equivalent =curl= call
string to keep things portable.

#+begin_src emacs-lisp
;; (use-package restclient
;;   :ensure t
;;   :mode ("\\.restclient\\'" . restclient-mode))
#+end_src

** Scratch

Convenient package to create =*scratch*= buffers that are based on the
current buffer's major mode. This is more convienent than manually
creating a buffer to do some scratch work or reusing the initial
=*scratch*= buffer.

#+begin_src emacs-lisp
(use-package scratch
  :ensure t)
#+end_src

** Smartparens mode

#+begin_src emacs-lisp
(use-package smartparens
  :ensure t
  :diminish smartparens-mode
  :config (progn (require 'smartparens-config)
                 (smartparens-global-mode t)))
#+end_src

*** Smartparens org mode

Set up some pairings for org mode markup. These pairings won't
activate by default; they'll only apply for wrapping regions.

#+begin_src emacs-lisp
(sp-local-pair 'org-mode "~" "~" :actions '(wrap))
(sp-local-pair 'org-mode "/" "/" :actions '(wrap))
(sp-local-pair 'org-mode "*" "*" :actions '(wrap))
#+end_src
** Smartscan

#+BEGIN_QUOTE
Quickly jumps between other symbols found at point in Emacs.
#+END_QUOTE
http://www.masteringemacs.org/article/smart-scan-jump-symbols-buffer


#+begin_src emacs-lisp
(use-package smartscan
  :ensure t
  :config (global-smartscan-mode 1)
  :bind (("s-n" . smartscan-symbol-go-forward)
         ("s-p" . smartscan-symbol-go-backward)))
#+end_src

** Smex

Smex integrates ido with ~M-x~. I used to use this before moving on to
[[*Helm][helm]].

#+begin_src emacs-lisp
(use-package smex
  :if (not (featurep 'helm-mode))
  :ensure t
  :bind ("M-x" . smex))
#+end_src

** Skewer mode

Live coding for HTML/CSS/JavaScript.

#+begin_src emacs-lisp
(use-package skewer-mode
  :commands skewer-mode
  :ensure t
  :config (skewer-setup))
#+end_src

** Smoothscrolling

This makes it so ~C-n~-ing and ~C-p~-ing won't make the buffer jump
around so much.

#+begin_src emacs-lisp
(use-package smooth-scrolling
  :ensure t)
#+end_src

** Swift
#+begin_src emacs-lisp :tangle no
(use-package swift-mode
  :ensure t
  :init
  (defun flycheck-def-option-vars (&rest rest)
    )
  :config
  (add-to-list 'flycheck-checkers 'swift))
#+end_src

** Visual-regexp

#+begin_src emacs-lisp
(use-package visual-regexp
  :ensure t
  :init
  (use-package visual-regexp-steroids :ensure t)
  :bind (("C-c r" . vr/replace)
         ("C-c q" . vr/query-replace)
         ("C-c m" . vr/mc-mark) ; Need multiple cursors
         ("C-M-r" . vr/isearch-backward)
         ("C-M-s" . vr/isearch-forward)))
#+end_src

** Webmode

#+begin_src emacs-lisp :tangle no
(use-package web-mode
  :ensure t)
#+end_src

** Yasnippet

#+begin_src emacs-lisp
(use-package yasnippet
  :ensure t
  :diminish yas-minor-mode
  :config
  (define-key yas-minor-mode-map (kbd "<tab>") nil)
  (define-key yas-minor-mode-map (kbd "TAB") nil)
  (define-key yas-minor-mode-map (kbd "M-/") 'yas-expand)
  
  (setq yas-snippet-dirs (concat user-emacs-directory "snippets"))
  (yas-global-mode)
  
  
  ;(add-hook 'hippie-expand-try-functions-list 'yas-hippie-try-expand)
  ;(setq yas-expand-only-for-last-commands '(self-insert-command))
  
  (defun yas-popup-isearch-prompt (prompt choices &optional display-fn)
    (when (featurep 'popup)
      (popup-menu*
       (mapcar
        (lambda (choice)
          (popup-make-item
           (or (and display-fn (funcall display-fn choice))
               choice)
           :value choice))
        choices)
       :prompt prompt
       ;; start isearch mode immediately
       :isearch t
       )))

  (setq yas-prompt-functions '(yas-popup-isearch-prompt yas-ido-prompt yas-no-prompt))
  )
#+end_src

** Emmet

According to [[http://emmet.io/][their website]], "Emmet — the essential toolkit for web-developers."

#+begin_src emacs-lisp
(use-package emmet-mode
  :ensure t
  :commands emmet-mode
  :config
  (add-hook 'html-mode-hook 'emmet-mode)
  (add-hook 'css-mode-hook 'emmet-mode))
#+end_src

** Zoom-frm

=zoom-frm= is a nice package that allows you to resize the text of
entire Emacs frames (this includes text in the buffer, mode line, and
minibuffer). The =zoom-in/out= command acts similar to the
=text-scale-adjust= command---you can chain zooming in, out, or
resetting to the default size once the command has been initially
called.

Changing the =frame-zoom-font-difference= essentially enables a
"presentation mode" when calling =toggle-zoom-frame=.

#+begin_src emacs-lisp
(use-package zoom-frm
  :ensure t
  :bind (("C-M-=" . zoom-in/out)
         ("H-z"   . toggle-zoom-frame))
  :config
  (setq frame-zoom-font-difference 10))
#+end_src
   
* Misc
** Display Time

When displaying the time with =display-time-mode=, I don't care about
the load average.

#+begin_src emacs-lisp
(setq display-time-default-load-average nil)
#+end_src

** Display Battery Mode

See the documentation for =battery-mode-line-format= for the format
characters.

#+begin_src emacs-lisp
(setq battery-mode-line-format "[%b%p%% %t]")
#+end_src

** Docview keybindings

#+begin_src emacs-lisp
(use-package doc-view
  :config
  (define-key doc-view-mode-map (kbd "<right>") 'doc-view-next-page)
  (define-key doc-view-mode-map (kbd "<left>") 'doc-view-previous-page))
#+end_src

** OS X scrolling

#+begin_src emacs-lisp
(setq mouse-wheel-scroll-amount (quote (0.01)))
#+end_src

** Visible mode

I found out about this mode my looking through simple.el. I use it to
see raw org-mode files without going to a different mode like
text-mode, which is what I had done in order to see invisible text
(with org hyperlinks). The entire buffer contents will be visible
while still being in org mode.

#+begin_src emacs-lisp
(use-package visible-mode
  :bind ("H-v" . visible-mode))
#+end_src

** Chinese

#+BEGIN_SRC emacs-lisp
;; 设置 sentence-end 可以识别中文标点
(setq sentence-end
      "\\([。！？]\\|……\\|[.?!][]\"')}]*\\($\\|[ \t]\\)\\)[ \t\n]*")

#+END_SRC

* Xt3
#+BEGIN_SRC emacs-lisp
(setq xt3-lisp (expand-file-name "xt3Lisp.el" user-emacs-directory))
(load xt3-lisp)
#+END_SRC

* Reference
- https://github.com/purcell/emacs.d
- https://github.com/danielmai/.emacs.d 
